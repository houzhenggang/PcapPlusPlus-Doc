{"name":"PcapPlusPlus-Doc","tagline":"","body":"PcapPlusPlus\r\n============\r\n\r\nPcapPlusPlus is a multiplatform C++ network sniffing and packet parsing and manipulation framework. PcapPlusPlus is meant to be lightweight, efficient and easy to use.\r\n\r\n**What makes PcapPlusPlus different from similar C++ wrappers for libpcap/WinPcap?**\r\n- Designed to be lightweight and efficient\r\n- Support for ntop's **PF_RING** packet capturing engine that dramatically improves the packet capture speed\r\n- Support for many protocols, including HTTP protocol parsing and editing\r\n- Support for Remote Capture capabilities on Windows (using RPCAP protocol supported in WinPcap)\r\n- Vast object-oriented filtering mechanism that makes libpcap filters a lot more user-friendly (no need to know the exact filter string to use)\r\n\r\nPcapPlusPlus is currently supported on Windows and Linux operating systems.\r\nIt was tested on Windows (32bit and 64bit), Ubuntu and Fedora, but it should work on other Linux distributions as well.\r\nOther opeating systems such as FreeBSD and Mac OS were never tested and compilation on those platform would probably fail\r\n\r\n## Package Content ##\r\n\r\nThe PcapPlusPlus package contains several libraries, unit-tests and example utilities:\r\n\r\n1. **Packet++ library** - a library for parsing, creating and editing packets\r\n2. **Pcap++ library** - a library for intercepting and sending packets. This library is actually a C++ wrapper for the libPcap and WinPcap libraries\r\n3. **Common++ library** - a library with some common code utilities used both by Packet++ and Pcap++\r\n4. **Packet++Test unit-test** - a unit-test application for testing the Packet++ library\r\n5. **Pcap++Test unit-test** - a unit-test application for testing the Pcap++ library\r\n6. **Example applications:**\r\n  1. **Packet Parsing** - a short guide for parsing packets using Pcap++ and Packet++\r\n  2. **Break Pcap FileTo Streams** - an application that takes a pcap file and breaks it into several pcap files, each containing one stream\r\n  3. **ARP Spoofing** - an application that does ARP spoofing using Packet++ and Pcap++\r\n\r\n#### Supported Protocols ####\r\n\r\nThe Packet++ library currently supports parsing, editing and creation of packets of the following protocols:\r\n\r\n1. Ethernet\r\n2. IPv4\r\n3. IPv6\r\n4. ARP\r\n5. VLAN\r\n6. TCP\r\n7. UDP\r\n8. HTTP request header\r\n9. HTTP response header\r\n10. Generic payload\r\n\r\n#### Supported Engines and Devices ####\r\n\r\nPcapPlusPlus currently works with the following devices:\r\n\r\n1. libpcap live device (on Linux)\r\n2. WinPcap live device (on Windows)\r\n3. Vanilla PF_RING device (on Linux)\r\n4. Remote live device (on Windows)\r\n5. File devices\r\n\r\n\r\n#### PF_RING support ####\r\n\r\nPcapPlusPlus provides a clean and simple C++ wrapper API for Vanilla PF_RING. Currently only Vanilla PF_RING is supported which provides significant performance improvement in comparison to libpcap or Linux kernel, but PF_RING DNA or ZC (which allows kernel bypass and zero-copy of packets from NIC to user-space) isn't supported yet. I hope I'll be able to add this support in the future.\r\n\r\nYou can read more about PF_RING in ntop web-site: [http://www.ntop.org/products/pf_ring/](http://www.ntop.org/products/pf_ring/) and in PF_RING user guide: [https://svn.ntop.org/svn/ntop/trunk/PF_RING/doc/UsersGuide.pdf](https://svn.ntop.org/svn/ntop/trunk/PF_RING/doc/UsersGuide.pdf)\r\n\r\nIn order to compile PcapPlusPlus with PF_RING you need to:\r\n\r\n1. Download PF_RING from ntop's web-site: [http://www.ntop.org/get-started/download/#PF_RING](http://www.ntop.org/get-started/download/#PF_RING)\r\n2. Note that I used PcapPlusPlus with PF_RING version 6.0.2. I can't guarantee it'll work with previous versions\r\n3. Once PF_RING is compiled successfully, you need to run PcapPlusPlus **configure-linux.sh** and type \"y\" in \"Compile PcapPlusPlus with PF_RING?\"\r\n4. Then you can compile PcapPlusPlus as usual (using make, see below)\r\n5. Before you activate any PcapPlusPlus program that uses PF_RING, don't forget to enable PF_RING kernel module. If you forget to do that, PcapPlusPlus will output an appropriate error on startup which will remind you:\r\n```shell\r\nsudo insmod <PF_RING_LOCATION>/kernel/pf_ring.ko\r\n```\r\n\r\n\r\n## Download ##\r\n\r\nIn order to download PcapPlusPlus, please visit the github [page](https://github.com/seladb/PcapPlusPlus/).\r\n\r\nYou can also download it using these links:\r\n\r\n- [ZIP format](https://github.com/seladb/PcapPlusPlus/archive/master.zip)\r\n- [tat.gz format](https://github.com/seladb/PcapPlusPlus/archive/master.tar.gz)\r\n \r\nOr clone the git repository by:\r\n\r\n```shell\r\ngit clone https://github.com/seladb/PcapPlusPlus.git\r\n```\r\n\r\n## Compiling ##\r\n\r\n#### Prerequisutes - Windows ####\r\n\r\nIn order to compile PcapPlusPlus on Windows you need the following components:\r\n\r\n1. The MinGW environment and compiler - this is the only environment currently supported for PcapPlusPlus. You can download and install is from www.mingw.org/\r\n2. Winpcap developer's pack - containing the wpcap library PcapPlusPlus is linking with plus relevant h files. You can download it from https://www.winpcap.org/devel.htm\r\n\r\n#### Prerequisutes - Linux ####\r\n\r\nIn order to compile PcapPlusPlus on Linux you need the following components:\r\n\r\n1. libPcap developers pack - containing the libpcap library PcapPlusPlus is linking with plus relevant h files. You can download it from http://www.tcpdump.org/#latest-release or through package management engines \r\nsuch as apt-get:\r\n  ```shell\r\n  sudo apt-get install libpcap-dev\r\n  ```\r\n\r\n  or yum:\r\n  ```shell\r\n  sudo yum install libpcap-devel\r\n  ```\r\n  \r\n2. Make sure you have the libstdc++-static package. If not, you can install it via *yum* or *apt-get*\r\n\r\n#### Configuration and Compilation ####\r\n\r\n*On Windows:*\r\n\r\n1. run the **configure-windows.bat** batch file from PcapPlusPlus main directory. The script will ask you for WinPcap developer's pack location and MinGW location\r\n2. run **mingw32-make.exe all** from PcapPlusPlus main directory\r\n3. This should compile all libraries, unit-tests and examples\r\n\r\n*On Linux:*\r\n\r\n1. run the **configure-linux.sh** script from PcapPlusPlus main directory\r\n2. If you'd like to compile it with PF_RING please follow the instructions in the \"PF_RING support\" section above and type \"y\" in \"Compile PcapPlusPlus with PF_RING?\"\r\n2. Run **make all** from PcapPlusPlus main directory\r\n3. This should compile all libraries, unit-tests and examples\r\n \r\n#### Simple Testing ####\r\n\r\nTo ensure configuration and compilation went smoothly, you can run the unit-test applications for both Packet++ and Pcap++:\r\n\r\n```shell\r\nseladb@seladb:~/home/PcapPlusPlus/Packet++Test$ Bin/Packet++Test.exe\r\nEthPacketCreation             : PASSED\r\nEthAndArpPacketParsing        : PASSED\r\nArpPacketCreation             : PASSED\r\nVlanParseAndCreation          : PASSED\r\nIpv4PacketCreation            : PASSED\r\nIpv4PacketParsing             : PASSED\r\nIpv4UdpChecksum               : PASSED\r\nIpv6UdpPacketParseAndCreate   : PASSED\r\nTcpPacketNoOptionsParsing     : PASSED\r\nTcpPacketWithOptionsParsing   : PASSED\r\nTcpPacketWithOptionsParsing2  : PASSED\r\nTcpPacketCreation             : PASSED\r\nInsertDataToPacket            : PASSED\r\nInsertVlanToPacket            : PASSED\r\nRemoveLayerTest               : PASSED\r\nHttpRequestLayerParsingTest   : PASSED\r\nHttpRequestLayerCreationTest  : PASSED\r\nHttpRequestLayerEditTest      : PASSED\r\nHttpResponseLayerParsingTest  : PASSED\r\nHttpResponseLayerCreationTest : PASSED\r\nHttpResponseLayerEditTest     : PASSED\r\nCopyLayerAndPacketTest        : PASSED\r\nALL TESTS PASSED!!\r\n\r\nseladb@seladb:~/PcapPlusPlus/Pcap++Test$ sudo Bin/Pcap++Test.exe -i 10.0.0.1\r\nUsing ip: 10.0.0.1\r\nDebug mode: off\r\nStarting tests...\r\nTestIPAddress                 : PASSED\r\nTestMacAddress                : PASSED\r\nTestPcapFileReadWrite         : PASSED\r\nTestPcapLiveDeviceList        : PASSED\r\nTestPcapLiveDeviceListSearch  : PASSED\r\nTestPcapLiveDevice            : PASSED\r\nTestPcapLiveDeviceStatsMode   : PASSED\r\nTestWinPcapLiveDevice         : PASSED\r\nTestPcapFilters               : PASSED\r\nTestSendPacket                : PASSED\r\nTestSendPackets               : PASSED\r\nTestRemoteCaptue              : PASSED\r\nTestHttpRequestParsing        : PASSED\r\nTestHttpResponseParsing       : PASSED\r\nTestPrintPacketAndLayers      : PASSED\r\nTestPfRingDevice              : PASSED\r\nTestPfRingDeviceSingleChannel : PASSED\r\nTestPfRingMultiThreadAllCores : PASSED\r\nTestPfRingMultiThreadSomeCores: PASSED\r\nTestPfRingSendPacket          : PASSED\r\nTestPfRingSendPackets         : PASSED\r\nTestPfRingFilters             : PASSED\r\nALL TESTS PASSED!!\r\n```\r\n\r\n*Notice:* Pcap++Test must be run with **sudo** on Linux to have access to all NICs\r\n\r\n## Creating Applications With PcapPlusPlus ##\r\n\r\nCreating applications that uses PcapPlusPlus is rather easy. To do this, please follow these steps:\r\n\r\n1. First make sure PcapPlusPlus is configured and compiles successfully\r\n2. All you need is under the **Dist/** directory. You can find the PcapPlusPlus libraries, header files, code examples and helpful makefiles\r\n3. In order to compile your application with PcapPlusPlus libraries you should use the makefiles under the **mk/** directory. There are 2 makefiles there:\r\n  1. *platform.mk* - contains mainly platform-dependent variables such as MinGW and WinPcap directory in Windows, binary files extensions (.lib/.exe for Windows, .a/none for Linux), compile utilities names (g++/g++.exe, ar/ar.exe), etc. \r\n  2. *PcapPlusPlus.mk* - contains variables that encapsulate all you need in order to compile your application with PcapPlusPlus:\r\n    1. *PCAPPP_INCLUDES* - all includes needed\r\n    2. *PCAPPP_LIBS_DIR* - location of all libraries needed for compiling and linking with PcapPlusPlus\r\n    3. *PCAPPP_LIBS* - all libraries needed for compiling and linking with PcapPlusPlus\r\n    4. *PCAPPP_POST_BUILD* - all post-build actions needed after compiling with PcapPlusPlus\r\n    5. *PCAPPLUSPLUS_HOME* - PcapPlusPlus home directory\r\n4. As an example, here is a simple Makefile needed for compiling the ArpSpoofing example on Windows (you can find this example under the **Examples/ArpSpoofing-SimpleMakefile-Windows** directory):\r\n  ```makefile\r\n  -include ../../Dist/mk/platform.mk\r\n  -include ../../Dist/mk/PcapPlusPlus.mk\r\n\r\n  # All Target\r\n  all:\r\n  	g++.exe $(PCAPPP_INCLUDES) -c -o main.o main.cpp\r\n  	g++.exe $(PCAPPP_LIBS_DIR) -static-libgcc -static-libstdc++ -o ArpSpoofing.exe main.o $(PCAPPP_LIBS)\r\n\r\n  # Clean Target\r\n  clean:\r\n  	del main.o\r\n  	del ArpSpoofing.exe\r\n  ```\r\n\r\n5. And the same example on Linux (you can find it in **Examples/ArpSpoofing-SimpleMakefile-Linux**):\r\n  ```makefile\r\n  -include ../../Dist/mk/PcapPlusPlus.mk\r\n\r\n  # All Target\r\n  all:\r\n  	g++ $(PCAPPP_INCLUDES) -c -o main.o main.cpp\r\n  	g++ $(PCAPPP_LIBS_DIR) -static-libstdc++ -o ArpSpoofing main.o $(PCAPPP_LIBS)\r\n\r\n  # Clean Target\r\n  clean:\r\n  	rm main.o\r\n  	rm ArpSpoofing\r\n  ```\r\n6. Rather easy, doesn't it?\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
